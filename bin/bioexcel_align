#!/usr/bin/env python

"""
This script performs the Alignment step of the Cancer
Genome Variant pipeline, controlling the processes for 
each step.
"""

import glob
import datetime
import os
import sys
import argparse
import runMain as rm
import runGATK as rg
import runQC as rq

def parse_command_line(description=("This script performs the Alignment "
                "step of the Cancer Genome Variant pipeline.")):
    """
    Parser of command line arguments for Alignment.py
    """


    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument("-i", "--indir", default='',
                        help="Directory containing paired input FastQ files "
                        "to scan (ignored if -f/--files flag is prsent)")
    parser.add_argument("-f", "--files", nargs='*',
                        help="Flag to pass paired files by name rather than "
                        "input directory.")
    parser.add_argument("-o", "--outdir", default='',
                        help="Output directory")
    parser.add_argument("-t", "--threads", type=int, default='1',
                        help="Number of threads to use.")
    # parser.add_argument("-w", "--walltime", default='02:00:00',
    #                     help="Walltime for PBS submission script. Must be of "
    #                     "the format hh:mm:ss.")

    return parser.parse_args()

    def make_paths(arglist):
        """
    Create paths required for run of SeqQC pipeline
    """
    arglist.tmpdir = os.path.abspath("{0}/tmp".format(arglist.outdir))
    arglist.aligndir = os.path.abspath("{0}/Alignment".format(
                                                            arglist.outdir))
    arglist.outdir = os.path.abspath(arglist.outdir)
    arglist.indir = os.path.abspath(arglist.indir)

    for dirpath in [arglist.tmpdir, arglist.aligndir, arglist.outdir]:
        if not os.path.exists(dirpath):
            os.makedirs(dirpath)
    return arglist

    def get_files(arglist):
        """
    Search for and return list of files to pass through SeqQC pipeline
    """
    if not arglist.files:
        # arglist dirs already have abs paths, so don't need to expand
        infiles = glob.glob('{0}/*fastq*'.format(arglist.indir))
    else:
        # make sure files exist
        for checkfile in arglist.files:
            if not os.path.isfile(checkfile):
                print "{} does not exist. Exiting.".format(checkfile)
                sys.exit()
        # expand paths to files (now we know the all exist)
        infiles = [os.path.abspath(x) for x in arglist.files]
    return infiles


if __name__ == "__main__":

    args = parse_command_line()

    args = make_paths(args)
    args.files = get_files(args)
    args.threads = get_threads(args)

    ### Run FastQC
    prm = rm.run_main(args)
    prm.wait()

    prg = rg.run_gatk(args)
    prg.wait()
    ### Check FastQC output, simple yes/no to quality trimming
    ### Output and resubmission of jobs handled by checkFastQC
    prq = rq.run_qc(args)
    prq.wait()